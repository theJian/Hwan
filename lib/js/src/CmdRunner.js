// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                 = require("bs-platform/lib/js/list.js");
var Path                 = require("path");
var $$Array              = require("bs-platform/lib/js/array.js");
var Caml_obj             = require("bs-platform/lib/js/caml_obj.js");
var Caml_array           = require("bs-platform/lib/js/caml_array.js");
var Logging$Hwan         = require("./Logging.js");
var Package$Hwan         = require("./Package.js");
var Child_process        = require("child_process");
var CollectPackages$Hwan = require("./CollectPackages.js");

function readRootPackage() {
  return Package$Hwan.readPackageMeta(Path.join(__dirname, "../../../"));
}

function getVersion($$package) {
  var match = $$package[/* version */1];
  if (match) {
    return match[0];
  } else {
    return "";
  }
}

function echoVersion() {
  console.log(getVersion(readRootPackage(/* () */0)));
  return /* () */0;
}

function findStartNodeIds(name, graph) {
  if (name === "") {
    return Package$Hwan.findLeftPNodeIds(graph);
  } else {
    return /* :: */[
            Package$Hwan.findNodeId((function (node) {
                    var match = node[/* package */0][/* meta */1][/* name */0];
                    if (match) {
                      return +(match[0] === name);
                    } else {
                      return /* false */0;
                    }
                  }), graph),
            /* [] */0
          ];
  }
}

function queueTask(graph, startNodeIds) {
  var visited = Caml_array.caml_make_vect(graph.length, /* false */0);
  var dependents = List.fold_left((function (deps, param) {
          var id1 = param[0];
          Caml_array.caml_array_set(deps, id1, /* :: */[
                param[1],
                Caml_array.caml_array_get(deps, id1)
              ]);
          return deps;
        }), Caml_array.caml_make_vect(graph.length, /* [] */0), List.flatten(List.mapi((function (id1, node) {
                  return List.map((function (id2) {
                                return /* tuple */[
                                        id2,
                                        id1
                                      ];
                              }), node[/* depNodes */1]);
                }), $$Array.to_list(graph))));
  var que = [/* [] */0];
  var curIds = startNodeIds;
  while(curIds !== /* [] */0) {
    List.iter((function (id) {
            Caml_array.caml_array_set(visited, id, /* true */1);
            que[0] = /* :: */[
              id,
              que[0]
            ];
            return /* () */0;
          }), curIds);
    curIds = List.filter((function (id) {
              return List.for_all((function (id_) {
                            return Caml_array.caml_array_get(visited, id_);
                          }), Caml_array.caml_array_get(dependents, id));
            }))(List.sort_uniq(Caml_obj.caml_compare, List.flatten(List.map((function (id) {
                        return Caml_array.caml_array_get(graph, id)[/* depNodes */1];
                      }), curIds))));
  };
  return List.map((function (id) {
                return Caml_array.caml_array_get(graph, id);
              }), que[0]);
}

function syscall(syscmd, node) {
  var path = node[/* package */0][/* path */0];
  return Logging$Hwan.output(Child_process.execSync(syscmd, {
                  cwd: path,
                  encoding: "utf8"
                }));
}

function runCommand(command, $$package) {
  Logging$Hwan.logCommand(command);
  var match = +($$package === "");
  Logging$Hwan.logPackage(match !== 0 ? "all" : $$package);
  var graph = Package$Hwan.buildPackageGraph(CollectPackages$Hwan.collectPackages(/* () */0));
  var startIds = findStartNodeIds($$package, graph);
  var partial_arg = List.fold_left((function (s1, s2) {
          return s1 + (" " + s2);
        }), "", command);
  List.iter((function (param) {
          return syscall(partial_arg, param);
        }), queueTask(graph, startIds));
  return /* () */0;
}

function run(param) {
  var options = param[1];
  if (options[/* version */0] !== 0) {
    console.log(getVersion(readRootPackage(/* () */0)));
    return /* () */0;
  } else {
    return runCommand(param[0], options[/* package */1]);
  }
}

exports.readRootPackage  = readRootPackage;
exports.getVersion       = getVersion;
exports.echoVersion      = echoVersion;
exports.findStartNodeIds = findStartNodeIds;
exports.queueTask        = queueTask;
exports.syscall          = syscall;
exports.runCommand       = runCommand;
exports.run              = run;
/* path Not a pure module */
